#pragma kernel game_of_life

uint size;
StructuredBuffer<int> input_buffer;
RWStructuredBuffer<int> output_buffer;

uint coords_to_index(int2 coords)
{
    const uint wrapped_x = (coords.x + size) % size;
    const uint wrapped_y = (coords.y + size) % size;
    return wrapped_x + wrapped_y * size;
}

[numthreads(8, 8, 1)]
void game_of_life(const uint3 id : SV_DispatchThreadID)
{
    const uint center_index = coords_to_index(id.xy);
    const uint neighbors[8] = {
        coords_to_index(id.xy + int2(-1, -1)),
        coords_to_index(id.xy + int2(-1,  0)),
        coords_to_index(id.xy + int2(-1,  1)),
        coords_to_index(id.xy + int2( 0, -1)),
        coords_to_index(id.xy + int2( 0,  1)),
        coords_to_index(id.xy + int2( 1, -1)),
        coords_to_index(id.xy + int2( 1,  0)),
        coords_to_index(id.xy + int2( 1,  1))
    };

    uint number_of_living_neighbors = 0;
    for (uint i = 0; i < 8; i++)
    {
        number_of_living_neighbors += input_buffer[neighbors[i]];
    }

    // Loneliness
    if (number_of_living_neighbors < 2)
        output_buffer[center_index] = 0;
    // Overcrowding
    else if(number_of_living_neighbors > 3)
        output_buffer[center_index] = 0;
    // Stasis
    else if (number_of_living_neighbors == 2)
        output_buffer[center_index] = input_buffer[center_index];
    // Reproduction
    else if (number_of_living_neighbors == 3)
        output_buffer[center_index] = 1;
}